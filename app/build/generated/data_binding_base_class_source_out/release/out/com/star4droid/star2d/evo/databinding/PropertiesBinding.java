// Generated by view binder compiler. Do not edit!
package com.star4droid.star2d.evo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager2.widget.ViewPager2;
import com.star4droid.star2d.evo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PropertiesBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout backLin;

  @NonNull
  public final LinearLayout propertiesLinear;

  @NonNull
  public final NestedScrollView propertiesScroll;

  @NonNull
  public final ImageView propertiesSwipImage;

  @NonNull
  public final ViewPager2 viewPager;

  private PropertiesBinding(@NonNull LinearLayout rootView, @NonNull ImageView back,
      @NonNull LinearLayout backLin, @NonNull LinearLayout propertiesLinear,
      @NonNull NestedScrollView propertiesScroll, @NonNull ImageView propertiesSwipImage,
      @NonNull ViewPager2 viewPager) {
    this.rootView = rootView;
    this.back = back;
    this.backLin = backLin;
    this.propertiesLinear = propertiesLinear;
    this.propertiesScroll = propertiesScroll;
    this.propertiesSwipImage = propertiesSwipImage;
    this.viewPager = viewPager;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PropertiesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PropertiesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.properties, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PropertiesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.backLin;
      LinearLayout backLin = ViewBindings.findChildViewById(rootView, id);
      if (backLin == null) {
        break missingId;
      }

      id = R.id.propertiesLinear;
      LinearLayout propertiesLinear = ViewBindings.findChildViewById(rootView, id);
      if (propertiesLinear == null) {
        break missingId;
      }

      id = R.id.propertiesScroll;
      NestedScrollView propertiesScroll = ViewBindings.findChildViewById(rootView, id);
      if (propertiesScroll == null) {
        break missingId;
      }

      id = R.id.properties_swip_image;
      ImageView propertiesSwipImage = ViewBindings.findChildViewById(rootView, id);
      if (propertiesSwipImage == null) {
        break missingId;
      }

      id = R.id.viewPager;
      ViewPager2 viewPager = ViewBindings.findChildViewById(rootView, id);
      if (viewPager == null) {
        break missingId;
      }

      return new PropertiesBinding((LinearLayout) rootView, back, backLin, propertiesLinear,
          propertiesScroll, propertiesSwipImage, viewPager);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
